{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///Users/enderkalem/si_app%20copy/app/api/create-checkout-session/route.js"],"sourcesContent":["// app/api/create-checkout-session/route.js\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request) {\n  try {\n    // Log environment check\n    console.log('=== Stripe Checkout Debug ===');\n    console.log('STRIPE_SECRET_KEY exists:', !!process.env.STRIPE_SECRET_KEY);\n    console.log('STRIPE_SECRET_KEY prefix:', process.env.STRIPE_SECRET_KEY?.substring(0, 10));\n    \n    // Check if Stripe key exists\n    if (!process.env.STRIPE_SECRET_KEY) {\n      console.error('❌ STRIPE_SECRET_KEY is missing from environment variables');\n      return NextResponse.json(\n        { error: 'Stripe configuration error - missing API key' },\n        { status: 500 }\n      );\n    }\n\n    // Dynamic import of Stripe to avoid initialization issues\n    const Stripe = (await import('stripe')).default;\n    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: '2023-10-16', // Use a specific API version\n    });\n\n    // Parse and validate request body\n    const body = await request.json();\n    console.log('Request body:', body);\n    \n    const { userId, email } = body;\n\n    if (!userId || !email) {\n      console.error('❌ Missing userId or email');\n      return NextResponse.json(\n        { error: 'Missing required fields: userId and email' },\n        { status: 400 }\n      );\n    }\n\n    // Get origin for redirect URLs\n    const origin = request.headers.get('origin') || 'http://localhost:3000';\n    console.log('Origin:', origin);\n\n    // Verify price ID exists\n    const priceId = process.env.STRIPE_PRICE_ID;\n    if (!priceId) {\n      console.error('❌ STRIPE_PRICE_ID is missing from environment variables');\n      return NextResponse.json(\n        { error: 'Stripe price configuration error' },\n        { status: 500 }\n      );\n    }\n\n    console.log('Using price ID:', priceId);\n\n    // Create checkout session\n    console.log('Creating Stripe checkout session...');\n    const session = await stripe.checkout.sessions.create({\n      customer_email: email,\n      mode: 'subscription',\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      success_url: `${origin}/payment-success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${origin}/profile`,\n      metadata: { \n        userId,\n        supabase_user_id: userId \n      },\n      subscription_data: {\n        metadata: {\n          userId,\n          supabase_user_id: userId\n        }\n      }\n    });\n\n    console.log('✅ Checkout session created:', session.id);\n    console.log('Checkout URL:', session.url);\n\n    return NextResponse.json({ \n      url: session.url,\n      sessionId: session.id \n    });\n\n  } catch (err) {\n    console.error('❌ Stripe API Error:', err);\n    console.error('Error type:', err.type);\n    console.error('Error code:', err.code);\n    console.error('Error message:', err.message);\n    console.error('Full error:', JSON.stringify(err, null, 2));\n\n    return NextResponse.json(\n      { \n        error: err.message || 'Failed to create checkout session',\n        type: err.type,\n        code: err.code\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"AAAA,2CAA2C;;;;;AAC3C;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,6BAA6B,CAAC,CAAC,QAAQ,GAAG,CAAC,iBAAiB;QACxE,QAAQ,GAAG,CAAC,6BAA6B,QAAQ,GAAG,CAAC,iBAAiB,EAAE,UAAU,GAAG;QAErF,6BAA6B;QAC7B,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;YAClC,QAAQ,KAAK,CAAC;YACd,OAAO,gKAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+C,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,MAAM,SAAS,CAAC,wIAAsB,EAAE,OAAO;QAC/C,MAAM,SAAS,IAAI,OAAO,QAAQ,GAAG,CAAC,iBAAiB,EAAE;YACvD,YAAY;QACd;QAEA,kCAAkC;QAClC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG;QAE1B,IAAI,CAAC,UAAU,CAAC,OAAO;YACrB,QAAQ,KAAK,CAAC;YACd,OAAO,gKAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;QAChD,QAAQ,GAAG,CAAC,WAAW;QAEvB,yBAAyB;QACzB,MAAM,UAAU,QAAQ,GAAG,CAAC,eAAe;QAC3C,IAAI,CAAC,SAAS;YACZ,QAAQ,KAAK,CAAC;YACd,OAAO,gKAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,0BAA0B;QAC1B,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YACpD,gBAAgB;YAChB,MAAM;YACN,sBAAsB;gBAAC;aAAO;YAC9B,YAAY;gBACV;oBACE,OAAO;oBACP,UAAU;gBACZ;aACD;YACD,aAAa,GAAG,OAAO,iDAAiD,CAAC;YACzE,YAAY,GAAG,OAAO,QAAQ,CAAC;YAC/B,UAAU;gBACR;gBACA,kBAAkB;YACpB;YACA,mBAAmB;gBACjB,UAAU;oBACR;oBACA,kBAAkB;gBACpB;YACF;QACF;QAEA,QAAQ,GAAG,CAAC,+BAA+B,QAAQ,EAAE;QACrD,QAAQ,GAAG,CAAC,iBAAiB,QAAQ,GAAG;QAExC,OAAO,gKAAY,CAAC,IAAI,CAAC;YACvB,KAAK,QAAQ,GAAG;YAChB,WAAW,QAAQ,EAAE;QACvB;IAEF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,QAAQ,KAAK,CAAC,eAAe,IAAI,IAAI;QACrC,QAAQ,KAAK,CAAC,eAAe,IAAI,IAAI;QACrC,QAAQ,KAAK,CAAC,kBAAkB,IAAI,OAAO;QAC3C,QAAQ,KAAK,CAAC,eAAe,KAAK,SAAS,CAAC,KAAK,MAAM;QAEvD,OAAO,gKAAY,CAAC,IAAI,CACtB;YACE,OAAO,IAAI,OAAO,IAAI;YACtB,MAAM,IAAI,IAAI;YACd,MAAM,IAAI,IAAI;QAChB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}